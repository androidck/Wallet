package com.minmai.wallet.common.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.minmai.wallet.moudles.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property UserHead = new Property(1, String.class, "userHead", false, "USER_HEAD");
        public final static Property CreateDate = new Property(2, String.class, "createDate", false, "CREATE_DATE");
        public final static Property LoginName = new Property(3, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property Pwd = new Property(4, String.class, "pwd", false, "PWD");
        public final static Property UpdateDate = new Property(5, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property CompanyId = new Property(6, String.class, "companyId", false, "COMPANY_ID");
        public final static Property UserNo = new Property(7, String.class, "userNo", false, "USER_NO");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property LoginAccount = new Property(11, String.class, "loginAccount", false, "LOGIN_ACCOUNT");
        public final static Property LoginStatus = new Property(12, String.class, "loginStatus", false, "LOGIN_STATUS");
        public final static Property RegisterState = new Property(13, int.class, "registerState", false, "REGISTER_STATE");
        public final static Property IsOpenDateRepayment = new Property(14, String.class, "isOpenDateRepayment", false, "IS_OPEN_DATE_REPAYMENT");
        public final static Property RegisterDeviceModel = new Property(15, String.class, "registerDeviceModel", false, "REGISTER_DEVICE_MODEL");
        public final static Property RegisterDeviceImel = new Property(16, String.class, "registerDeviceImel", false, "REGISTER_DEVICE_IMEL");
        public final static Property RegisterDeviceType = new Property(17, String.class, "registerDeviceType", false, "REGISTER_DEVICE_TYPE");
        public final static Property LoginPasswordSalt = new Property(18, String.class, "loginPasswordSalt", false, "LOGIN_PASSWORD_SALT");
        public final static Property LoginPassword = new Property(19, String.class, "loginPassword", false, "LOGIN_PASSWORD");
        public final static Property PaymentPasswordSalt = new Property(20, String.class, "paymentPasswordSalt", false, "PAYMENT_PASSWORD_SALT");
        public final static Property LastLoginDate = new Property(21, String.class, "lastLoginDate", false, "LAST_LOGIN_DATE");
        public final static Property RecommendCode = new Property(22, String.class, "recommendCode", false, "RECOMMEND_CODE");
        public final static Property QrCode = new Property(23, String.class, "qrCode", false, "QR_CODE");
        public final static Property RecommendUrl = new Property(24, String.class, "recommendUrl", false, "RECOMMEND_URL");
        public final static Property RegisterWay = new Property(25, String.class, "registerWay", false, "REGISTER_WAY");
        public final static Property UserType = new Property(26, String.class, "userType", false, "USER_TYPE");
        public final static Property IsStartOrdering = new Property(27, boolean.class, "isStartOrdering", false, "IS_START_ORDERING");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USER_HEAD\" TEXT," + // 1: userHead
                "\"CREATE_DATE\" TEXT," + // 2: createDate
                "\"LOGIN_NAME\" TEXT," + // 3: loginName
                "\"PWD\" TEXT," + // 4: pwd
                "\"UPDATE_DATE\" TEXT," + // 5: updateDate
                "\"COMPANY_ID\" TEXT," + // 6: companyId
                "\"USER_NO\" TEXT," + // 7: userNo
                "\"PHONE\" TEXT," + // 8: phone
                "\"SEX\" TEXT," + // 9: sex
                "\"EMAIL\" TEXT," + // 10: email
                "\"LOGIN_ACCOUNT\" TEXT," + // 11: loginAccount
                "\"LOGIN_STATUS\" TEXT," + // 12: loginStatus
                "\"REGISTER_STATE\" INTEGER NOT NULL ," + // 13: registerState
                "\"IS_OPEN_DATE_REPAYMENT\" TEXT," + // 14: isOpenDateRepayment
                "\"REGISTER_DEVICE_MODEL\" TEXT," + // 15: registerDeviceModel
                "\"REGISTER_DEVICE_IMEL\" TEXT," + // 16: registerDeviceImel
                "\"REGISTER_DEVICE_TYPE\" TEXT," + // 17: registerDeviceType
                "\"LOGIN_PASSWORD_SALT\" TEXT," + // 18: loginPasswordSalt
                "\"LOGIN_PASSWORD\" TEXT," + // 19: loginPassword
                "\"PAYMENT_PASSWORD_SALT\" TEXT," + // 20: paymentPasswordSalt
                "\"LAST_LOGIN_DATE\" TEXT," + // 21: lastLoginDate
                "\"RECOMMEND_CODE\" TEXT," + // 22: recommendCode
                "\"QR_CODE\" TEXT," + // 23: qrCode
                "\"RECOMMEND_URL\" TEXT," + // 24: recommendUrl
                "\"REGISTER_WAY\" TEXT," + // 25: registerWay
                "\"USER_TYPE\" TEXT," + // 26: userType
                "\"IS_START_ORDERING\" INTEGER NOT NULL );"); // 27: isStartOrdering
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(2, userHead);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(6, updateDate);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(8, userNo);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String loginAccount = entity.getLoginAccount();
        if (loginAccount != null) {
            stmt.bindString(12, loginAccount);
        }
 
        String loginStatus = entity.getLoginStatus();
        if (loginStatus != null) {
            stmt.bindString(13, loginStatus);
        }
        stmt.bindLong(14, entity.getRegisterState());
 
        String isOpenDateRepayment = entity.getIsOpenDateRepayment();
        if (isOpenDateRepayment != null) {
            stmt.bindString(15, isOpenDateRepayment);
        }
 
        String registerDeviceModel = entity.getRegisterDeviceModel();
        if (registerDeviceModel != null) {
            stmt.bindString(16, registerDeviceModel);
        }
 
        String registerDeviceImel = entity.getRegisterDeviceImel();
        if (registerDeviceImel != null) {
            stmt.bindString(17, registerDeviceImel);
        }
 
        String registerDeviceType = entity.getRegisterDeviceType();
        if (registerDeviceType != null) {
            stmt.bindString(18, registerDeviceType);
        }
 
        String loginPasswordSalt = entity.getLoginPasswordSalt();
        if (loginPasswordSalt != null) {
            stmt.bindString(19, loginPasswordSalt);
        }
 
        String loginPassword = entity.getLoginPassword();
        if (loginPassword != null) {
            stmt.bindString(20, loginPassword);
        }
 
        String paymentPasswordSalt = entity.getPaymentPasswordSalt();
        if (paymentPasswordSalt != null) {
            stmt.bindString(21, paymentPasswordSalt);
        }
 
        String lastLoginDate = entity.getLastLoginDate();
        if (lastLoginDate != null) {
            stmt.bindString(22, lastLoginDate);
        }
 
        String recommendCode = entity.getRecommendCode();
        if (recommendCode != null) {
            stmt.bindString(23, recommendCode);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(24, qrCode);
        }
 
        String recommendUrl = entity.getRecommendUrl();
        if (recommendUrl != null) {
            stmt.bindString(25, recommendUrl);
        }
 
        String registerWay = entity.getRegisterWay();
        if (registerWay != null) {
            stmt.bindString(26, registerWay);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(27, userType);
        }
        stmt.bindLong(28, entity.getIsStartOrdering() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(2, userHead);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(3, createDate);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(6, updateDate);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(7, companyId);
        }
 
        String userNo = entity.getUserNo();
        if (userNo != null) {
            stmt.bindString(8, userNo);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String loginAccount = entity.getLoginAccount();
        if (loginAccount != null) {
            stmt.bindString(12, loginAccount);
        }
 
        String loginStatus = entity.getLoginStatus();
        if (loginStatus != null) {
            stmt.bindString(13, loginStatus);
        }
        stmt.bindLong(14, entity.getRegisterState());
 
        String isOpenDateRepayment = entity.getIsOpenDateRepayment();
        if (isOpenDateRepayment != null) {
            stmt.bindString(15, isOpenDateRepayment);
        }
 
        String registerDeviceModel = entity.getRegisterDeviceModel();
        if (registerDeviceModel != null) {
            stmt.bindString(16, registerDeviceModel);
        }
 
        String registerDeviceImel = entity.getRegisterDeviceImel();
        if (registerDeviceImel != null) {
            stmt.bindString(17, registerDeviceImel);
        }
 
        String registerDeviceType = entity.getRegisterDeviceType();
        if (registerDeviceType != null) {
            stmt.bindString(18, registerDeviceType);
        }
 
        String loginPasswordSalt = entity.getLoginPasswordSalt();
        if (loginPasswordSalt != null) {
            stmt.bindString(19, loginPasswordSalt);
        }
 
        String loginPassword = entity.getLoginPassword();
        if (loginPassword != null) {
            stmt.bindString(20, loginPassword);
        }
 
        String paymentPasswordSalt = entity.getPaymentPasswordSalt();
        if (paymentPasswordSalt != null) {
            stmt.bindString(21, paymentPasswordSalt);
        }
 
        String lastLoginDate = entity.getLastLoginDate();
        if (lastLoginDate != null) {
            stmt.bindString(22, lastLoginDate);
        }
 
        String recommendCode = entity.getRecommendCode();
        if (recommendCode != null) {
            stmt.bindString(23, recommendCode);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(24, qrCode);
        }
 
        String recommendUrl = entity.getRecommendUrl();
        if (recommendUrl != null) {
            stmt.bindString(25, recommendUrl);
        }
 
        String registerWay = entity.getRegisterWay();
        if (registerWay != null) {
            stmt.bindString(26, registerWay);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(27, userType);
        }
        stmt.bindLong(28, entity.getIsStartOrdering() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userHead
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loginName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pwd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // companyId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // loginAccount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // loginStatus
            cursor.getInt(offset + 13), // registerState
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // isOpenDateRepayment
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // registerDeviceModel
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // registerDeviceImel
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // registerDeviceType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // loginPasswordSalt
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // loginPassword
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // paymentPasswordSalt
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // lastLoginDate
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // recommendCode
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // qrCode
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // recommendUrl
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // registerWay
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // userType
            cursor.getShort(offset + 27) != 0 // isStartOrdering
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserHead(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLoginAccount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLoginStatus(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRegisterState(cursor.getInt(offset + 13));
        entity.setIsOpenDateRepayment(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRegisterDeviceModel(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRegisterDeviceImel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRegisterDeviceType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLoginPasswordSalt(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLoginPassword(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPaymentPasswordSalt(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLastLoginDate(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRecommendCode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setQrCode(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRecommendUrl(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRegisterWay(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUserType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsStartOrdering(cursor.getShort(offset + 27) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
